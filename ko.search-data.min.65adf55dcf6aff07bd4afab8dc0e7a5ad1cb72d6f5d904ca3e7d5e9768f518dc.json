[{"id":0,"href":"/posts/game-develop/common/game-data1/","title":"☁️ GoogleSheets로 GameData 관리하기 (1)","section":"📁 Common","content":"게임 데이터를 Unity 외부에서 수정하고 불러오는 방법으로 Google Spread Sheets를 사용하려고 합니다. 데이터 파일을 Unity 외부에 두면 빌드 후에도 데이터를 수정할 수 있어서 유지보수가 쉽습니다.\n목차는 다음과 같습니다.\n[목차]\nGoogle Spread Sheets 준비 Unity에서 Google Spread Sheets 불러오기 데이터 코드 생성 1. Google Spread Sheets 준비 # Google Spread Sheets API를 사용할 수 있게 세팅해봅시다.\n아래 링크에 접속해서, 연동할 구글 계정으로 로그인합니다.\n🔗 https://console.developers.google.com/\n상단의 프로젝트 선택 창을 열어서 새 프로젝트를 생성해줍니다.\n이 프로젝트에 우리가 해줄 일은 OAuth 클라이언트 ID를 생성하고, 고유 키를 발급받는 것입니다. OAuth 동의 화면 탭을 눌러서 대상을 \u0026lsquo;외부\u0026rsquo;로 세팅한 후 \u0026lsquo;만들기\u0026rsquo; 버튼을 눌러줍니다.\n대상 탭에서 반드시 테스트 사용자로 본인 이메일을 등록해줍니다.\n이제 클라이언트 ID를 만들어줍니다. 애플리케이션 유형은 \u0026lsquo;데스크톱 앱\u0026rsquo;을 선택해줍니다.\n그러면 ID와 보안 비밀번호가 생깁니다. Unity에 연동할 때 필요하니 복사해둡시다. 참고로 비밀번호는 처음 생성한 후 다시 찾아볼 수 없으니 따로 복사해서 저장해두어야 합니다.\n검색창에서 Google Sheets API를 검색한 후, 사용 버튼을 누르면 끝이 납니다.\n2. Unity에서의 사용 방법 # 유니티에 Google Spread Sheets를 연동하는 방법을 검색하면 주로 GSTU(Google Sheets To Unity)라는 무료 에셋이 많이 나옵니다.\n🔗 https://assetstore.unity.com/packages/tools/utilities/google-sheets-to-unity-73410\n이런 좋은 무료 에셋을 가져다 사용하는 것도 나쁘지 않겠지만, 제가 원하는 것은 스프레드 시트 내용을 가져다가 바로 사용 가능한 데이터 코드로 변환하는 것입니다.\n새로운 스프레드 시트를 생성하고, 다음과 같이 데이터의 첫 행에는 data type, 두번째 행에는 필드 이름을 적도록 하겠습니다.\nint string float enum Id Name Hp ColorType 1 Knight 100 Red 2 Archer 80 Blue 3 Mage 60 Green 이런 데이터를 입력한 후 유니티 에디터에서 딸깍 버튼을 누르면\npublic class TestData { public int Id { get; private set; } public string Name { get; private set; } public float Hp { get; private set; } public ColorType ColorType { get; private set; } public TestData(int id, string name, float hp, ColorType colorType) { Id = id; Name = name; Hp = hp; ColorType = colorType; } } 이렇게 데이터 클래스가 생성됩니다.\n구조는 이렇습니다.\nGoogleSheetConfig: ScriptableObject 입니다. 여러 값을 캐싱하는 용도입니다. GoogleSheetMenu: 유니티에 메뉴를 표시해줍니다. GoogleSheetManager: 유효한 토큰으로 시트 목록을 받아옵니다. DataCodeGenerator: 시트 목록을 받아서 데이터 코드를 생성합니다. 1) GoogleSheetsConfig 생성 # 위에서 생성한 클라이언트 ID, 보안 비밀번호, 연동할 스프레드 시트 링크를 입력할 config 파일입니다.\nGoogleSheetsConfig [CreateAssetMenu(menuName = \u0026#34;SpreadSheetConfig\u0026#34;)] public class GoogleSheetConfig : ScriptableObject { [SerializeField] private string _clientId; [SerializeField] private string _clientSecretNumber; [SerializeField] private string _googleSheetId; [SerializeField] private int _portNumber = 8080; [SerializeField] private float _cancelTimeSeconds = 30f; [SerializeField, HideInInspector] private OAuthToken _oAuthToken; public const string FilePath = \u0026#34;Assets/1_Script/Common/GoogleSpreadSheet/GoogleSheetConfig.asset\u0026#34;; public OAuthToken OAuthTokenCache =\u0026gt; _oAuthToken; public (string Id, string SecretNumber) ClientInfo =\u0026gt; (_clientId, _clientSecretNumber); public string GoogleSheetId =\u0026gt; _googleSheetId; public string RedirectUrl =\u0026gt; $\u0026#34;http://localhost:{_portNumber.ToString()}/\u0026#34;; public bool IsAccessTokenValid =\u0026gt; OAuthTokenCache != null \u0026amp;\u0026amp; !string.IsNullOrEmpty(OAuthTokenCache.AccessToken) \u0026amp;\u0026amp; OAuthTokenCache.NextRefreshTime \u0026gt; DateTime.Now.Ticks; public bool HasRefreshToken =\u0026gt; OAuthTokenCache != null \u0026amp;\u0026amp; !string.IsNullOrEmpty(OAuthTokenCache.RefreshToken); public float CancelTimeSeconds =\u0026gt; _cancelTimeSeconds; public void SetOAuthToken(OAuthToken token) { _oAuthToken = token; token.NextRefreshTime = DateTime.Now.AddSeconds(token.ExpiresIn).Ticks; #if UNITY_EDITOR EditorUtility.SetDirty(this); AssetDatabase.SaveAssets(); #endif } } 2) GoogleSheetMenu # UnityEditor.MenuItem으로 메뉴를 등록해 Unity Editor 상단의 탭을 클릭하면 코드가 실행되도록 합니다.\nGoogleSheetMenu [MenuItem(\u0026#34;Google Sheet/Generate Data Code\u0026#34;)] public static void GenerateDataCode() { GenerateDataCodeAsync().Forget(); return; async UniTask GenerateDataCodeAsync() { var config = AssetDatabase.LoadAssetAtPath\u0026lt;GoogleSheetConfig\u0026gt;(GoogleSheetConfig.FilePath); if (!config) { Debug.LogError(\u0026#34;SpreadSheetsConfig not found\u0026#34;); return; } var sheets = await GoogleSheetManager.GetSheetsAsync(config); await GoogleSheetCodeGenerator.GenerateAll(config, sheets); } } 3) GoogleSheetManager # DataClass [Serializable] public class OAuthToken { [JsonProperty(\u0026#34;access_token\u0026#34;)] public string AccessToken { get; set; } [JsonProperty(\u0026#34;refresh_token\u0026#34;)] public string RefreshToken { get; set; } [JsonProperty(\u0026#34;token_type\u0026#34;)] public string TokenType { get; set; } [JsonProperty(\u0026#34;expires_in\u0026#34;)] public int ExpiresIn { get; set; } public long NextRefreshTime; } [Serializable] public class GoogleSheetInfoResponse { [JsonProperty(\u0026#34;sheets\u0026#34;)] public List\u0026lt;SheetEntry\u0026gt; Sheets { get; set; } } [Serializable] public class SheetEntry { [JsonProperty(\u0026#34;properties\u0026#34;)] public SheetProperties Properties { get; set; } } [Serializable] public class SheetProperties { [JsonProperty(\u0026#34;sheetId\u0026#34;)] public int SheetId { get; set; } [JsonProperty(\u0026#34;title\u0026#34;)] public string SheetName { get; set; } [JsonProperty(\u0026#34;index\u0026#34;)] public int Index { get; set; } [JsonProperty(\u0026#34;sheetType\u0026#34;)] public string SheetType { get; set; } [JsonProperty(\u0026#34;gridProperties\u0026#34;)] public GridProperties GridProperties { get; set; } } [Serializable] public class GridProperties { [JsonProperty(\u0026#34;rowCount\u0026#34;)] public int RowCount { get; set; } [JsonProperty(\u0026#34;columnCount\u0026#34;)] public int ColumnCount { get; set; } } public class SheetValueResponse { [JsonProperty(\u0026#34;values\u0026#34;)] public List\u0026lt;List\u0026lt;string\u0026gt;\u0026gt; Values { get; set; } } public struct SheetInfo { public string SheetName { get; internal set; } public string[] ColumnTypes { get; internal set; } public string[] ColumnNames { get; internal set; } public Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt; EnumList { get; internal set; } } GetSheetsAsync() 함수의 내용을 이렇습니다.\nGoogleSheetManager.GetSheetsAsync() public static async UniTask\u0026lt;GoogleSheetInfoResponse\u0026gt; GetSheetsAsync(GoogleSheetConfig config) { if (!config.IsAccessTokenValid) { if (config.HasRefreshToken) { await RefreshAccessTokenAsync(config); } else { Debug.Log(\u0026#34;🌐 Token이 없음 =\u0026gt; 브라우저 인증 대기 중...\u0026#34;); var isSuccess = await StartOAuth(config); if (!isSuccess) { Debug.Log(\u0026#34;❌ 브라우저 인증 실패\u0026#34;); return null; } } } var googleSheetInfo = await FetchSheetListAsync(config); return googleSheetInfo; } AccessToken이 없을 경우 StartOAuth() 함수를 통해 새로 인증 후 토큰을 받아옵니다. 이 때 인증을 여러번 하지 않기 위해 RefreshToken도 함께 저장합니다.\nGoogleSheetManager.StartOAuth() private static async UniTask\u0026lt;bool\u0026gt; StartOAuth(GoogleSheetConfig config) { try { _cts?.Cancel(); _cts = new CancellationTokenSource(); _cts.CancelAfter(TimeSpan.FromSeconds(config.CancelTimeSeconds)); // OAuth 인증 URL 오픈 var url = GetBuildOAuthUrl(); Application.OpenURL(url); // Unity 로컬 서버(HttpListener)로 인증 코드 받아옴 _httpListener = new HttpListener(); _httpListener.Prefixes.Add(config.RedirectUrl); _httpListener.Start(); _httpListenerContext = await _httpListener.GetContextAsync().AsUniTask().AttachExternalCancellation(_cts.Token); var code = _httpListenerContext.Request.QueryString[\u0026#34;code\u0026#34;]; const string responseHtml = \u0026#34;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h2\u0026gt;Authentication complete. You can now return to Unity.\u0026lt;/h2\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;; var buffer = Encoding.UTF8.GetBytes(responseHtml); _httpListenerContext.Response.ContentLength64 = buffer.Length; await _httpListenerContext.Response.OutputStream.WriteAsync(buffer, 0, buffer.Length, _cts.Token); // 토큰 요청 var form = new WWWForm(); form.AddField(\u0026#34;code\u0026#34;, code); form.AddField(\u0026#34;client_id\u0026#34;, config.ClientInfo.Id); form.AddField(\u0026#34;client_secret\u0026#34;, config.ClientInfo.SecretNumber); form.AddField(\u0026#34;redirect_uri\u0026#34;, config.RedirectUrl); form.AddField(\u0026#34;grant_type\u0026#34;, \u0026#34;authorization_code\u0026#34;); var request = UnityWebRequest.Post(TokenEndpoint, form); await request.SendWebRequest().ToUniTask(cancellationToken: _cts.Token); if (request.result != UnityWebRequest.Result.Success) { Debug.LogError(\u0026#34;❌ Token 요청 실패: \u0026#34; + request.error); return false; } var token = JsonConvert.DeserializeObject\u0026lt;OAuthToken\u0026gt;(request.downloadHandler.text); config.SetOAuthToken(token); Debug.Log(\u0026#34;✅ Access Token 발급 성공\u0026#34;); return true; } catch (OperationCanceledException) { Debug.LogError(\u0026#34;⏱️ 인증 시간 초과\u0026#34;); return false; } catch (Exception e) { Debug.LogError(e); return false; } finally { _httpListenerContext?.Response.OutputStream?.Close(); _httpListener.Stop(); } string GetBuildOAuthUrl() { return new StringBuilder(Endpoint) .Append($\u0026#34;?client_id={config.ClientInfo.Id}\u0026#34;) .Append($\u0026#34;\u0026amp;redirect_uri={config.RedirectUrl}\u0026#34;) .Append(\u0026#34;\u0026amp;response_type=code\u0026#34;) .Append(\u0026#34;\u0026amp;scope=https://www.googleapis.com/auth/spreadsheets.readonly\u0026#34;) .Append(\u0026#34;\u0026amp;access_type=offline\u0026amp;prompt=consent\u0026#34;) .ToString(); } } AccessToken은 있는데, 만료 기한이 지났을 경우엔 RefreshAccessTokenAsync()함수를 통해 RefreshToken으로 새로 AccessToken을 받아옵니다.\nGoogleSheetManager.RefreshAccessTokenAsync() private static async UniTask\u0026lt;bool\u0026gt; RefreshAccessTokenAsync(GoogleSheetConfig config) { var form = new WWWForm(); form.AddField(\u0026#34;client_id\u0026#34;, config.ClientInfo.Id); form.AddField(\u0026#34;client_secret\u0026#34;, config.ClientInfo.SecretNumber); form.AddField(\u0026#34;refresh_token\u0026#34;, config.OAuthTokenCache.RefreshToken); form.AddField(\u0026#34;grant_type\u0026#34;, \u0026#34;refresh_token\u0026#34;); var request = UnityWebRequest.Post(TokenEndpoint, form); await request.SendWebRequest().ToUniTask(); if (request.result != UnityWebRequest.Result.Success) { Debug.LogError(\u0026#34;❌ Refresh 토큰 요청 실패: \u0026#34; + request.error); return false; } var token = JsonConvert.DeserializeObject\u0026lt;OAuthToken\u0026gt;(request.downloadHandler.text); config.SetOAuthToken(token); Debug.Log(\u0026#34;🔁 AccessToken 갱신 완료\u0026#34;); return true; } FetchSheetListAsync() 함수에서는 시트 리스트를 불러옵니다.\nGoogleSheetManager.FetchSheetListAsync() private static async UniTask\u0026lt;GoogleSheetInfoResponse\u0026gt; FetchSheetListAsync(GoogleSheetConfig config) { if (string.IsNullOrEmpty(config.GoogleSheetId)) { Debug.LogError(\u0026#34;❌ Spreadsheet Id가 설정되지 않았습니다.\u0026#34;); return null; } var url = GetGoogleSheetUrl(config.GoogleSheetId); var request = UnityWebRequest.Get(url); request.SetRequestHeader(\u0026#34;Authorization\u0026#34;, $\u0026#34;Bearer {config.OAuthTokenCache.AccessToken}\u0026#34;); await request.SendWebRequest().ToUniTask(); if (request.result != UnityWebRequest.Result.Success) { Debug.LogError($\u0026#34;❌ 시트 목록 요청 실패: {request.error}\u0026#34;); return null; } Debug.Log(\u0026#34;✅ 시트 목록 불러오기 성공\u0026#34;); var sheetInfoJson = request.downloadHandler.text; var sheetInfo = JsonConvert.DeserializeObject\u0026lt;GoogleSheetInfoResponse\u0026gt;(sheetInfoJson); return sheetInfo; } 3. 데이터 코드 생성 # 이제 GoogleSheetManager.GetSheetsAsync()로 받아온 GoogleSheetInfoResponse로 데이터 코드를 생성합니다. GoogleSheetInfoResponse로 에는 각 시트의 이름과 같은 정보만 있을 뿐 시트의 모든 행과 열에 대한 내용이 담긴 것은 아니기 때문에, 각 시트의 데이터를 새로 로드해와야 합니다.\nGoogleSheetInfoResponse.Sheets 리스트를 순회하며 Properties.SheetName으로 데이터를 로드해옵니다.\nLoadGoogleSheetsData() public static async UniTask\u0026lt;SheetValueResponse\u0026gt; LoadGoogleSheetsData(GoogleSheetConfig config, string sheetName) { var url = GetSheetValueUrl(config.GoogleSheetId, sheetName); var request = UnityWebRequest.Get(url); request.SetRequestHeader(\u0026#34;Authorization\u0026#34;, $\u0026#34;Bearer {config.OAuthTokenCache.AccessToken}\u0026#34;); await request.SendWebRequest().ToUniTask(); return JsonConvert.DeserializeObject\u0026lt;SheetValueResponse\u0026gt;(request.downloadHandler.text); } 그 다음 로드한 데이터를 사용하기 편하도록 SheetInfo로 만들어줍니다.\n앞의 예시 데이터에서 첫번째 행은 데이터의 타입, 두번째 행은 데이터의 필드 이름이 들어갔습니다. 따라서 columnTypes 필드에는 sheetValue.Values[0]를, columnNames 필드에는 sheetValue.Values[1]를 넣어줍니다.\nGetDataForGenerate() private static SheetInfo GetDataForGenerate(string sheetName, SheetValueResponse sheetValue) { if (sheetValue.Values.Count \u0026lt; 2) { Debug.LogWarning($\u0026#34;⚠️ 시트 {sheetName}의 데이터가 부족합니다 (2줄 이상 필요)\u0026#34;); return default; } var columnTypes = sheetValue.Values[0].ToArray(); var columnNames = sheetValue.Values[1].ToArray(); var enumDic = new Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt;(); for (var j = 0; j \u0026lt; columnTypes.Length; j++) { if (columnTypes[j].ToLower() != TypeEnum) continue; enumDic.Add(j, new List\u0026lt;string\u0026gt;()); } for (var j = 2; j \u0026lt; sheetValue.Values.Count; j++) { var columns = sheetValue.Values[j].ToArray(); for (var k = 0; k \u0026lt; columns.Length; k++) { if (!enumDic.TryGetValue(k, out var enumList)) continue; if (enumList.Contains(columns[k])) continue; enumDic[k].Add(columns[k]); } } return new SheetInfo { SheetName = sheetName, ColumnNames = columnNames, ColumnTypes = columnTypes, EnumList = enumDic, }; } 이제 SheetInfo List를 가지고 StringBuilder.AppendLine()으로 생성할 코드를 차곡차곡 쌓아 저장하기만 하면 됩니다.\nMakeDataClass() private static StringBuilder MakeDataClass(List\u0026lt;SheetInfo\u0026gt; loadedDataList) { var sb = new StringBuilder(); sb.AppendLine($\u0026#34;namespace {GoogleSheetCodeGenerator.GeneratedGameDataNameSpace}\u0026#34;); sb.AppendLine(\u0026#34;{\u0026#34;); foreach (var loadedData in loadedDataList) { sb.AppendIndentedLine($\u0026#34;public class {loadedData.SheetName}\u0026#34;, 1); sb.AppendIndentedLine(\u0026#34;{\u0026#34;, 1); for (var i = 0; i \u0026lt; loadedData.ColumnNames.Length; i++) { var columnName = loadedData.ColumnNames[i]; if (loadedData.ColumnTypes[i].ToLower() == GoogleSheetCodeGenerator.TypeEnum) { sb.AppendIndentedLine($\u0026#34;public {columnName} {columnName}\u0026#34; + \u0026#34; { get; private set; }\u0026#34;, 2); } else { var columnType = GoogleSheetCodeGenerator.StringToTypes[loadedData.ColumnTypes[i]]; sb.AppendIndentedLine($\u0026#34;public {columnType} {columnName}\u0026#34; + \u0026#34; { get; private set; }\u0026#34;, 2); } } sb.AppendLine(); var paramList = GoogleSheetCodeGenerator.MakeParameters(loadedData.ColumnTypes, loadedData.ColumnNames); sb.AppendIndentedLine($\u0026#34;public {loadedData.SheetName}({paramList})\u0026#34;, 2); sb.AppendIndentedLine(\u0026#34;{\u0026#34;, 2); foreach (var columnName in loadedData.ColumnNames) { sb.AppendIndentedLine($\u0026#34;{columnName} = {columnName.FirstCharacterToLower()};\u0026#34;, 3); } sb.AppendIndentedLine(\u0026#34;}\u0026#34;, 2); sb.AppendIndentedLine(\u0026#34;}\u0026#34;, 1); } sb.AppendLine(\u0026#34;}\u0026#34;); return sb; } WriteGameDataToFileAsync() public static async UniTask WriteGameDataToFileAsync(string filePath, StringBuilder contents) { var directoryName = Path.GetDirectoryName(filePath); if (!string.IsNullOrEmpty(directoryName) \u0026amp;\u0026amp; !Directory.Exists(directoryName)) { Directory.CreateDirectory(directoryName); } await File.WriteAllTextAsync(filePath, contents.ToString(), UTF8NoBom); } 여기까지 마치면 유니티 에디터의 상단 Google Sheet 탭을 통해 데이터 코드를 생성할 수 있습니다.\n이제 실제 플레이 시 실제 데이터를 받아와서 이 데이터 클래스에 저장해줘야겠죠. 이후의 내용은 다음 포스팅에서 다뤄보겠습니다.\n"}]